// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tickest.Data;

#nullable disable

namespace Tickest.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231019001445_Ajuste-Coluna-Area")]
    partial class AjusteColunaArea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tickest.Models.Entidades.Anexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Anexos");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Notificacoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbertoPorId")
                        .HasColumnType("int");

                    b.Property<int>("AnalistaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Anexo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataLimite")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<int>("SolicitanteId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<string>("Título")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AbertoPorId");

                    b.HasIndex("AnalistaId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("SolicitanteId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.TicketFase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TicketFases");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.UsuarioEspecialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalistaId")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalistaId");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("UsuarioEspecialidades");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", b =>
                {
                    b.HasBaseType("Tickest.Models.Entidades.Usuarios.Usuario");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int");

                    b.HasIndex("DepartamentoId");

                    b.HasDiscriminator().HasValue("UsuarioAnalista");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.UsuarioSolicitante", b =>
                {
                    b.HasBaseType("Tickest.Models.Entidades.Usuarios.Usuario");

                    b.HasDiscriminator().HasValue("UsuarioSolicitante");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Anexo", b =>
                {
                    b.HasOne("Tickest.Models.Entidades.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Especialidade", b =>
                {
                    b.HasOne("Tickest.Models.Entidades.Departamento", "Departamento")
                        .WithMany("Especialidades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Ticket", b =>
                {
                    b.HasOne("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", "AbertoPor")
                        .WithMany("AberturaTickets")
                        .HasForeignKey("AbertoPorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", "Analista")
                        .WithMany("TicketResponsaveis")
                        .HasForeignKey("AnalistaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tickest.Models.Entidades.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tickest.Models.Entidades.Usuarios.UsuarioSolicitante", "Solicitante")
                        .WithMany("Solicitacoes")
                        .HasForeignKey("SolicitanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbertoPor");

                    b.Navigation("Analista");

                    b.Navigation("Departamento");

                    b.Navigation("Solicitante");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.UsuarioEspecialidade", b =>
                {
                    b.HasOne("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", "Analista")
                        .WithMany("UsuarioEspecialidades")
                        .HasForeignKey("AnalistaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tickest.Models.Entidades.Especialidade", "Especialidade")
                        .WithMany("UsuarioEspecialidades")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analista");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", b =>
                {
                    b.HasOne("Tickest.Models.Entidades.Departamento", null)
                        .WithMany("Analistas")
                        .HasForeignKey("DepartamentoId");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Departamento", b =>
                {
                    b.Navigation("Analistas");

                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Especialidade", b =>
                {
                    b.Navigation("UsuarioEspecialidades");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.UsuarioAnalista", b =>
                {
                    b.Navigation("AberturaTickets");

                    b.Navigation("TicketResponsaveis");

                    b.Navigation("UsuarioEspecialidades");
                });

            modelBuilder.Entity("Tickest.Models.Entidades.Usuarios.UsuarioSolicitante", b =>
                {
                    b.Navigation("Solicitacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
